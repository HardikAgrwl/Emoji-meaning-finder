{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["emojiDictionary","emojiArray","Object","keys","App","useState","meaning","setMeaning","className","type","onChange","event","target","value","style","fontSize","map","item","onClick","emojiClickHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAGMA,EAAkB,CACtB,eAAO,UACP,eAAO,YACP,eAAO,MACP,eAAO,QACP,eAAO,OACP,eAAO,aAGLC,EAAaC,OAAOC,KAAKH,GA0CdI,MAxCf,WAAgB,IAAD,EAEmBC,mBAAS,2CAF5B,mBAENC,EAFM,KAEIC,EAFJ,KAmBb,OACE,sBAAKC,UAAU,MAAf,UACE,8CACA,uBAAOC,KAAK,OAAOC,SAlBvB,SAA4BC,GACvBA,EAAMC,OAAOC,SAASb,EAEvBO,EAAW,aAAeP,EAAgBW,EAAMC,OAAOC,QAE1B,KAAvBF,EAAMC,OAAOC,MACnBN,EAAW,2CAERA,EAAW,0CAWd,uBAAK,uBAAK,uBACV,qBAAKO,MAAO,CAACC,SAAS,WAAtB,SACIT,IAEF,uBAAK,uBACP,+CACA,uBAEA,6BACGL,EAAWe,KAAI,SAAAC,GACd,OAAO,oBAAIC,QAAW,kBAlBhC,SAA2BD,GACzBV,EAAW,aAAeP,EAAgBiB,IAiBNE,CAAkBF,IAAvC,SAA+CA,aCnCjDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.abb91379.chunk.js","sourcesContent":["import React , {useState} from \"react\";\nimport './App.css';\n\nconst emojiDictionary = {\n  \"üòÄ\" : \"Smiling\",\n  \"üò≤\" : \"disbelief\",\n  \"üòî\" : \"sad\",\n  \"üò°\" : \"angry\",\n  \"üòç\" : \"love\",\n  \"üò£\" : \"annoyance\"\n};\n\nvar emojiArray = Object.keys(emojiDictionary);\n\nfunction App() {\n\n  const [meaning , setMeaning ] = useState(\"Enter an Emoji or Choose one from below\");\n\n  function inputChangeHandler(event){\n    if(event.target.value in emojiDictionary)\n    {\n      setMeaning(\"Meaning : \" + emojiDictionary[event.target.value]);\n    }\n    else if(event.target.value === \"\"){\n      setMeaning(\"Enter an Emoji or Choose one from below\");\n    }\n    else setMeaning(\"We do not have that in our database\");\n  }\n\nfunction emojiClickHandler(item){\n  setMeaning(\"Meaning : \" + emojiDictionary[item]);\n}\n\n  return (\n    <div className=\"App\">\n      <h1>Emoji Finder</h1>\n      <input type=\"text\" onChange={inputChangeHandler}/>\n      <br/><br/><br/>\n      <div style={{fontSize:\"x-large\"}}>\n         {meaning}\n      </div>\n        <br/><br/>\n      <h1>Emoji We Know</h1>\n      <br/>\n\n      <ul>\n        {emojiArray.map(item => {\n          return <li onClick = {() => emojiClickHandler(item)}>{item}</li>;\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}